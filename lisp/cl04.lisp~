(setf arr (make-array '(2 3) :initial-element nil))

(aref arr 0 0)

(setf (aref arr 0 0) 'b)

(vector "a" 'b 3)

(setf vec (make-array 4))

(svref vec 0)

(defun bin-search (obj vec)
  (let ((len (length vec)))
    (and (not (zerop len))
	 (finder obj vec 0 (- len 1)))))

(defun finder (obj vec start end)
  (let ((range (- end start)))
    (if (zerop range)
	(if (eql obj (aref vec start))
	    obj
	  nil)
      (let ((mid (+ start (round (/ range 2)))))
	(let ((obj2 (aref vec mid)))
	  (if (< obj obj2)
	      (finder obj vec start (- mid 1))
	    (if (> obj obj2)
		(finder obj vec (+ mid 1) end)
	      obj)))))))

(sort "elbow" #'char<)

(aref "abc" 1)

(char "abc" 1)

(let ((str (copy-seq "Merlin")))
  (setf (char str 3) #\k)
  str)

(equal "fred" "fred")

(equal "fred" "Fred")

(string-equal "fred" "Fred")

; Hello world
(copy-seq "Hello World!")

(format nil "~A or ~A" "truth" "dare")

; Hello World
(format nil "~A" "Hello World!")

(defun block-height (b) (svref b 0))
